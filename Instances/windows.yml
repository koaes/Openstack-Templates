heat_template_version: 2018-03-02

description: Template that creates a private network

parameters:
  public_network:
    type: string
    label: Public network name or ID
    description: Public network with floating IP addresses.
    default: public
  cidr:
    type: string
    label: Network CIDR
    description: The CIDR of the private network.
    default: '192.168.100.0/24'
  dns:
    type: comma_delimited_list
    label: DNS nameservers
    description: Comma separated list of DNS nameservers for the private network.
    default: '8.8.8.8'

resources:
  private_network:
    type: OS::Neutron::Net
  
  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_network }
      cidr: { get_param: cidr }
      dns_nameservers: { get_param: dns } 

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: public_network }

  router-interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet: { get_resource: private_subnet }

  windows_base:
    type: OS::Nova::Server
    properties:
      metadata: {admin_pass: abc123!@#}
      flavor: cy.large
      image: Windows 10
      name: Server2
      networks: [network: {get_resource: private_network}]
      user_data: |
        #ps1
        $securepwd = ConvertTo-SecureString "toor" -AsPlaintext -Force
        Get-LocalUser -Name "windows10" | Set-LocalUser -Password $securepwd
        New-Item -ItemType directory -Path c:\temp
      user_data_format: RAW
      
  my_instance2:
    type: OS::Nova::Server
    properties:
      metadata: {admin_pass: abc123!@#}
      flavor: cy.large
      image: Windows 10
      name: Server2
      networks: [network: {get_resource: private_network}]
      user_data: |
        #ps1
        $securepwd = ConvertTo-SecureString "toor" -AsPlaintext -Force
        Get-LocalUser -Name "windows10" | Set-LocalUser -Password $securepwd
        New-Item -ItemType directory -Path c:\temp
        $programsToDownload = @(("npp.7.5.9.Installer.exe", "https://notepad-plus-plus.org/repository/7.x/7.5.9/", " /Q /S"),
            ("nmap-7.70-setup.exe", "https://nmap.org/dist/", " /S"),
            ("Wireshark-win64-2.6.4.exe", "https://1.na.dl.wireshark.org/win64/", " /S") )
        $destPath = "c:\temp\"    
        for($i=0; $i -lt $programsToDownload.Length; $i++){
          $filename = $programsToDownload[$i][0]
          $url = $programsToDownload[$i][1]
          $arguments = $programsToDownload[$i][2]
          $urlWithFilename = $url + $filename
          $destPathWithFilename = $destPath + $filename
          $webClient = New-Object System.Net.WebClient
          $webClient.DownloadFile($urlWithFilename, $destPathWithFilename)
          Invoke-Expression -Command "$destPathWithFilename $arguments"
        }
        write-host "Completed!!"
